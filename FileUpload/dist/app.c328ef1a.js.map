{"version":3,"sources":["upload.js","app.js"],"names":["formatBytes","bytes","decimals","k","dm","sizes","i","Math","floor","log","parseFloat","pow","toFixed","upload","selector","options","files","input","document","querySelector","preview","createElement","open","classList","add","textContent","multi","setAttribute","accept","Array","isArray","join","insertAdjacentElement","tiggerInput","click","changeHandler","e","target","length","from","innerHTML","forEach","file","type","match","reader","FileReader","onload","ev","src","result","insertAdjacentHTML","name","substring","split","size","readAsDataURL","removeHandler","dataset","console","filter","block","closest","setTimeout","remove","addEventListener"],"mappings":"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","file":"app.c328ef1a.js","sourceRoot":"..","sourcesContent":["const formatBytes = (bytes, decimals = 2) =>{\r\n    if (!+bytes) return '0 Bytes'\r\n\r\n    const k = 1024\r\n    const dm = decimals < 0 ? 0 : decimals\r\n    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']\r\n\r\n    const i = Math.floor(Math.log(bytes) / Math.log(k))\r\n\r\n    return `${parseFloat((bytes / Math.pow(k, i)).toFixed(dm))} ${sizes[i]}`\r\n};\r\n\r\nexport function upload(selector, options = {}) {\r\n    let files = [];\r\n    const input = document.querySelector(selector);\r\n    const preview = document.createElement('div');\r\n    const open = document.createElement('button');\r\n\r\n    preview.classList.add('preview');\r\n    open.classList.add('btn');\r\n    open.textContent = 'Открыть';\r\n\r\n    if(options.multi) {\r\n        input.setAttribute('multiple', true)\r\n    }\r\n\r\n    if(options.accept && Array.isArray(options.accept)) {\r\n        input.setAttribute('accept', options.accept.join(','))\r\n    }\r\n\r\n    input.insertAdjacentElement('afterend', preview);\r\n    input.insertAdjacentElement('afterend', open);\r\n\r\n    const tiggerInput = () => input.click();\r\n    const changeHandler = e => {\r\n        if(!e.target.files.length){\r\n            return\r\n        }\r\n\r\n        files = Array.from(e.target.files);\r\n\r\n        preview.innerHTML = '';\r\n        files.forEach(file => {\r\n            if(!file.type.match('image')) {\r\n                return\r\n            }\r\n\r\n            const reader = new FileReader();\r\n            reader.onload = ev => {\r\n                const src = ev.target.result;\r\n                preview.insertAdjacentHTML('afterbegin', `\r\n                    <div class=\"preview-image\">\r\n                        <div class=\"preview-remove\" data-name=\"${file.name}\">&times;</div>\r\n                        <img src=\"${src}\" alt=\"${file.name}\"/>\r\n                        <div class=\"preview-info\">\r\n                            <span>${file.name.substring(0, 6)} .${file.name.split('.')[1]}</span>\r\n                            ${formatBytes(file.size)}\r\n                        </div>\r\n                    </div>\r\n                `)\r\n            };\r\n\r\n            reader.readAsDataURL(file);\r\n        })\r\n    }\r\n\r\n    const removeHandler = e => {\r\n        if(!e.target.dataset.name) {\r\n            return\r\n        }\r\n\r\n        const { name } = e.target.dataset;\r\n        console.log(files)\r\n\r\n        files = files.filter(file => file.name !== name);\r\n        const block = document\r\n        .querySelector(`[data-name=\"${name}\"]`)\r\n        .closest('.preview-image')\r\n\r\n        block.classList.add('removing');\r\n        setTimeout(() => block.remove(), 300);\r\n    };\r\n\r\n    open.addEventListener('click', tiggerInput);\r\n    input.addEventListener('change', changeHandler);\r\n    preview.addEventListener('click', removeHandler);\r\n};","import { upload } from './upload.js';\r\n\r\n\r\nupload('#file', {\r\n    multi: true,\r\n    accept: ['.png', '.jpg', '.jpeg', '.gif'],\r\n});"]}